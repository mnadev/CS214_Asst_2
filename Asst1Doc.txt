SCANNERCSVSORTER.C
scannerCSVsorter is a program that given a column to sort by, an optional directory to search, and an optional directory to output file, looks through all files and subdirectories of the directory to search and sorts all valid CSV files and outputs them to the directory. 
SYNOPSIS
  scannerCSVsorter.out -c <ColumnToSortBy> -d <directoryToSearch> -o <outputDirectory>
DESCRIPTION
  scannerCSVsorter looks through the entire directory that is to be searched and looks at all files and subdirectories. Then, the CSV file is sorted by the given parameter and the output is written to a file of the form filename-sorted-columnSortedBy.csv to the output directory. 
  
  CSVWRITE:
  void csvwrite(movieInfo** movieArr, int size ,char* categories, char* filename);
  
  csvwrite is a function that takes in a (sorted) array of movieInfo structs, the size of the array, the column headers of the csv file, and the output filename. Using these parameters, the csvwrite function writes the column headers and the movieInfo array to the file with the given filename.
  
  ISINT:
  int isInt(movieInfo** dataRows, int sizeOfArray);
  
  isInt is a function that takes in an array of movieInfo structs and the size of the array. The function iterates through the array and output a 1 if the data values that we want to sort are numeric in nature and a 0 otherwise.
  
  PARSECSV:
  void parseCSV(char* filename, char* columnToSort, char* destDirectory);
  
  parseCSV is a function that takes a filename corresponding to a csv file, a column to sort the file by and the destination directory. parseCSV then parses the CSV and creates a movieInfo struct. Then, parseCSV uses mergesort to sort the file by the given column. Then, the sorted array is written into an output file in the destination directory by calling csvwrite();
  
  ISVALIDCSV:
  int isValidCSV(char* filename, char* columnToSort);
  
  isValidCSV is a function that validates a csv file. Given a filename and a column to sort by, isValidCSV checks if the file has the ".csv" extension and checks if the file has the given column. isValidCSV also checks if the file is actually a valid csv by validating that each line has the same number of commmas. isValidCSV returns a 1 if the csv is valid and a 0 otherwise. 
  
OPTIONS
  "-c" indicates that the sorting of data entries is to be done based on columns
  <ColumnToSortBy> is the name of the column that the program is to sort by.
  -d indicates the directory that is to be searched
  <directoryToSearch> is the directory to be searched.
  -o indicates the output directory.
  <outputDirectory> is the output directory.
EXAMPLES
	./scannerCSVSorter.out -c title -d files -o sortedFiles
	Will sort all valid csv files in files/ with the specific column(titles) and write the newly sorted csv files into sortedFiles directory.
EXIT STATUS
The code will return 0 if terminated successfully. The code will return -1 if the command line arguments are not correct or if there are insufficient arguments. 
SEE ALSO
scannerCSVsorter.h
mergesort.c
BUGS
None currently known.
AUTHOR(s)
Eric Lin and Mohammad Nadeem


The design of the program is as follows:
	Before the directory is searched, the program will check the arguments to ensure that the arguments were properly inputted, outputting to STDERR and returning -1 if the arguments did not match the required format. Specifically, the only argument that is necessary is "-c <ColumnToSortBy>". If that argument is not given, the program will return -1. Otherwise, it will run and use the current directory as the one to search and output files to. 
	The program then prints the current, parent process's PID. Then, we iterate through all the files and subdirectories. For each file and subdirectory, the program forks itself and print the child's pid. For a subdirectory, we iterate through all files and subdirectories and fork.  For a file, we check if the file is a valid CSV. If so, we parse and output. Then, the program outputs the number of all processes and exits.

SCANNERCSVSORTER.H
SYNOPSIS
scannerCSVsorter.h is a header file that defines necessary structs and functions required for the CSV sorter to operate.
DESCRIPTION

STRUCT _MOVIEINFO
typedef struct _movieInfo movieInfo
This struct holds information for a given movie. The struct has the following parameters:
 	char* beforeSortedCol;			
	char* toBeSorted;				
	char* afterSortedCol;		
	int sizeBefore;
	int sizeOfSort;
	int sizeAfter;
        int sortHasQuotes;
beforeSortedCol holds all of the character that occur before the column that is to be sorted in a given line. toBeSorted holds the data that is part of the column that is to be sorted. afterSortedCol holds the data that is after the column that is to be sorted. sizeBefore is the amount of characters that occur before the sorted column. sizeOfSort is the amount of characters of the column that is to be sorted. sizeAfter is the amount of character after the column that is to be sorted. sortHasQuotes is an int that is 1 if the column to be sorted is surrounded by quotes and a 0 otherwise. 

MERGESORT
void mergesort(movieInfo** arr, int leftInd, int rightInd, int isInt); 
See MERGESORT.C


EXIT STATUS
Since this is a header file, exit status is not defined and not necessary for function of the code.
SEE ALSO
scannerCSVsorter.c
mergesort.c
BUGS
None currently known.
AUTHOR(s)
Eric Lin and Mohammad Nadeem


This header file defines the struct movieInfo which has threechar * fields and three int fields. A fourth int field is also used as a boolean variable. The first field called beforeSortedCol holds all of the data before the sorted column. The second field called toBeSorted holds the column that we will sort. The third field called afterSortedCol holds all of the data after the sorted column. The three int fields hold the number of characters in each of the char* fields. The int used like a boolean is to determine if the sorted column had quotes in it, in which case the quotes need to be placed back when printing results to STDOUT. This header file also describes the mergesort function so that it can be used in simpleCSVsorter.c. 

MERGESORT.C
SYNOPSIS
mergesort.c takes in a an array of movieInfo and then performs mergesort on the array in question given a certain parameter.
DESCRIPTION
MERGESORT
void mergesort(movieInfo** arr, int left, int right, int isInt)

mergesort takes in a movieInfo array, a left pointer, a right pointer and an int that states if the value to be sorted is numeric. It then sorts the array using the mergesort algorithm using the toBeSorted parameter of movieInfo.

SWAP
void swap(movieInfo* A, movieInfo* B)

swap takes two pointers to a movieInfo struct in memory and swaps the two values at the given addresses.

INTCOMPARISON
float intComparison(float intA, float intB)

intComparison is a comparator for floats. It takes two parameters, float intA and float intB. It will return 0 if the two are equal, a negative value if intA is less than intB and a positive value if intA is greater than intB.

MERGE
void merge(movieInfo** arr, int left, int half, int right, int isInt)

merge takes an array of which both halfs are sorted already, a pointer to the leftmost index, a pointer to the rightmost index, a pointer to the middle index and an int that states if the data is numeric or not. Merge then merges these two arrays in place into a sorted array. 

EXIT STATUS
Mergesort does not return a value. It sorts the array using pointers. 
SEE ALSO
simpleCSVsorter.c
simpleCSVsorter.h
BUGS
None currently known.
AUTHOR(s)
Eric Lin and Mohammad Nadeem

For mergesort, there are 4 parameters needed to run mergesort. The first is, trivially, the array in question that must be sorted. Mergesort also requires the left index and the right index of the (sub)array being sorted. The last parameter that mergesort takes is call isInt. isInt lets the program know if the data is numeric or alphabetic. If isInt is of value 0, then the data is alphabetic and must be sorted as such. If isInt is of value 1, then the data is numeric and must be sorted as such. For mergesort, the array is halved continously until the base case of an array of one element is reached. Then, each subarray is merged. To merge, the merge function is called. In merge, the two subarrays are written to temporary arrays. Two pointers point to the leftmost indices of both subarrays and whichever value is less is written to the actual array in which we will add our sorted values. The base case for merge is when both subarrays are the same array or when there is only one element in each subarray. In the case where there is only one element in each subarray, the values are swapped if they are out of order.  
	In mergesort.c, there exists a comparator function that is useful for comparing numeric values. The necessity for this was because strcmp does not correctly compare strings that represent numeric values. 

ISSUES
In creating this program, a number of issues arose. First and foremost, there were a lot of issues with forking. It was difficult to print the PIDs of each process to STDOUT in the correct format until we realized we had to flush the buffer since we used printf(). 
We also had some issues with having an excessive amount of projects until we realized that the program was also searching our .git directory and we then prevented that from occuring. 
We had some issues with parsing the CSV which was just due to some minor bugs that were fixed. 

TESTING METHODOLOGY
In order to determine the causes of the segmentation faults, portions of the code were commented out to see if the program would run without a segmentation fault. If the program ran without errors, lines of code were uncommented small segments at a time until the segmentation fault appeared again, allowing us to identify the specific portions of the program that were written incorrectly.
In order to test the functionality of the program, a few test CSVs were made that were specifically tailored to test specific portions of the program, such as having lines with whitespace, null entries, quoted entries, and columns with ony numbers.

TESTING
See the attached csv files for test cases. 
